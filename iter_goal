trajectory_boxes = []

        with open("trajectory_boxes.txt", "r") as file:
            for line in file:
                #Traitons une ligne de trois intervalles dans chaque direction
                line = line.replace( '(' , '' )
                line = line.replace( ')' , '' )
                list_of_intervals = line.strip().split(';') 
                lower_bounds = [] #list of lower boundaries in each direction
                widths       = []  
                for i in range(len(list_of_intervals)): #On traite chaque direction une Ã  une
                    B = list_of_intervals[i].replace('[','')
                    B = B.replace(']','')
                    B = B.split(',')
                    w = double(B[1]) - double(B[0])
                    lb = double(B[0]) #lower bound
                    lower_bounds.append(lb)
                    widths.append(w)
                trajectory_boxes.append([lower_bounds[0], lower_bounds[1], lower_bounds[2]])
                trajectory_boxes.append([lower_bounds[0]+widths[0], lower_bounds[1], lower_bounds[2]])
                trajectory_boxes.append([lower_bounds[0]+widths[0], lower_bounds[1]+widths[1], lower_bounds[2]])
                trajectory_boxes.append([lower_bounds[0], lower_bounds[1]+widths[1], lower_bounds[2]])
                trajectory_boxes.append([lower_bounds[0], lower_bounds[1], lower_bounds[2]+widths[2]])
                trajectory_boxes.append([lower_bounds[0]+widths[0], lower_bounds[1], lower_bounds[2]+widths[2]])
                trajectory_boxes.append([lower_bounds[0]+widths[0], lower_bounds[1]+widths[1], lower_bounds[2]+widths[2]])
                trajectory_boxes.append([lower_bounds[0], lower_bounds[1]+widths[1], lower_bounds[2]+widths[2]])

        #Ploting trajectory_boxes
        V=[]
        for i in range(len(trajectory_boxes)):
            V.append(trajectory_boxes[i]) #On lui donne les coordonnees de chaque sommet
            if(len(V)==8):                                                #Avec la position des 8 sommets il dessinne le polygone
                faces = [[V[0],V[1],V[2],V[3]], 
                        [V[4],V[5],V[6],V[7]],
                        [V[0],V[1],V[5],V[4]],
                        [V[2],V[3],V[7],V[6]],
                        [V[1],V[2],V[6],V[5]],
                        [V[4],V[7],V[3],V[0]]]
                collection = ax.add_collection3d(Poly3DCollection(faces, facecolors = 'green' ,linewidths=0.1, edgecolors='red', alpha=.1))
                # collection.set_facecolor('cyan')
                V = []
        